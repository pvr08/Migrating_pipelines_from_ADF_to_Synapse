{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfactory-vam"
		},
		"AzureDataLakeStorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage'"
		},
		"AzureDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsgvamshi.dfs.core.windows.net/"
		},
		"AzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kvaultvamshi.vault.azure.net/"
		},
		"AzureSqlDatabase_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqlservervams.database.windows.net"
		},
		"AzureSqlDatabase_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sqldb"
		},
		"AzureSqlDatabase_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "admin25"
		},
		"AzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqlservervams.database.windows.net"
		},
		"AzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sqldb"
		},
		"AzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "admin25"
		},
		"FileServer_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Users\\admin25\\Documents\\files"
		},
		"FileServer_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "admin25"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_05_sql_to_adls')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('tables')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlTable051",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "TrgtDelimitedText1",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Set variable",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tables",
							"value": {
								"value": "[[\"Customers\",\"Agents\",\"Products\"]",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"tables": {
						"type": "String"
					},
					"tablenames ": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-05-12T02:52:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable051')]",
				"[concat(variables('factoryId'), '/datasets/TrgtDelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable051')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TrgtDelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "project05",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "sqldb-pwd"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "sqldb-pwd"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileServer_properties_typeProperties_host')]",
					"userId": "[parameters('FileServer_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vm-pwd"
					}
				},
				"connectVia": {
					"referenceName": "selfintegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/selfintegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TriggerOnPrem_to_Gold')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-04-21T19:24:00",
						"endTime": "2025-04-21T23:20:00",
						"timeZone": "Eastern Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/selfintegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_cleandata_bz_to_sl')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Accounts"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Customers"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage",
								"type": "LinkedServiceReference"
							},
							"name": "LoanPayments"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage",
								"type": "LinkedServiceReference"
							},
							"name": "loans"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage",
								"type": "LinkedServiceReference"
							},
							"name": "transactions"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage",
								"type": "LinkedServiceReference"
							},
							"name": "AcctSink"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage",
								"type": "LinkedServiceReference"
							},
							"name": "AcctNulls"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage",
								"type": "LinkedServiceReference"
							},
							"name": "CustSink"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage",
								"type": "LinkedServiceReference"
							},
							"name": "CustNulls"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage",
								"type": "LinkedServiceReference"
							},
							"name": "LoanPymtSink"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage",
								"type": "LinkedServiceReference"
							},
							"name": "LoanPymtNulls"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage",
								"type": "LinkedServiceReference"
							},
							"name": "LoanSink"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage",
								"type": "LinkedServiceReference"
							},
							"name": "LoanNulls"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage",
								"type": "LinkedServiceReference"
							},
							"name": "TransactionSink"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage",
								"type": "LinkedServiceReference"
							},
							"name": "TransNulls"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "split1"
						},
						{
							"name": "window1"
						},
						{
							"name": "filterDuplicates"
						},
						{
							"name": "select1"
						},
						{
							"name": "split2"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "split3"
						},
						{
							"name": "window2"
						},
						{
							"name": "split4"
						},
						{
							"name": "filterloanDuplicates"
						},
						{
							"name": "select"
						},
						{
							"name": "split5"
						},
						{
							"name": "aggregate3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          account_id as integer,",
						"          customer_id as integer,",
						"          account_type as string,",
						"          balance as double",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'bronze_layer',",
						"     fileName: 'accounts.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> Accounts",
						"source(output(",
						"          customer_id as integer,",
						"          first_name as string,",
						"          last_name as string,",
						"          address as string,",
						"          city as string,",
						"          state as string,",
						"          zip as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'bronze_layer',",
						"     fileName: 'customers.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> Customers",
						"source(output(",
						"          payment_id as integer,",
						"          loan_id as integer,",
						"          payment_date as date,",
						"          payment_amount as double",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'bronze_layer',",
						"     fileName: 'loan_payments.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> LoanPayments",
						"source(output(",
						"          loan_id as integer,",
						"          customer_id as integer,",
						"          loan_amount as double,",
						"          interest_rate as double,",
						"          loan_term as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'bronze_layer',",
						"     fileName: 'loans.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> loans",
						"source(output(",
						"          transaction_id as integer,",
						"          account_id as integer,",
						"          transaction_date as date,",
						"          transaction_amount as double,",
						"          transaction_type as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'bronze_layer',",
						"     fileName: 'transactions.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> transactions",
						"Accounts aggregate(groupBy(account_id),",
						"     customer_id = first(customer_id),",
						"          account_type = first(account_type),",
						"          balance = first(balance)) ~> aggregate1",
						"aggregate1 split(!isNull(account_id) && !isNull(customer_id),",
						"     disjoint: false) ~> split1@(NotNull, Nulls)",
						"Customers window(over(customer_id,",
						"          first_name,",
						"          last_name),",
						"     asc(customer_id, true),",
						"     RowNum = rowNumber()) ~> window1",
						"window1 filter(RowNum==1) ~> filterDuplicates",
						"filterDuplicates select(mapColumn(",
						"          customer_id,",
						"          first_name,",
						"          last_name,",
						"          address,",
						"          city,",
						"          state,",
						"          zip",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 split(!isNull(customer_id) &&",
						"!isNull(first_name) || !isNull(last_name),",
						"     disjoint: false) ~> split2@(NotNull, Null)",
						"LoanPayments aggregate(groupBy(payment_id),",
						"     each(match(name!='payment_id'), $$ = first($$))) ~> aggregate2",
						"aggregate2 split(!isNull(payment_id) &&",
						"!isNull(loan_id),",
						"     disjoint: false) ~> split3@(NotNull, Nulls)",
						"split4@NotNull window(over(loan_id,",
						"          customer_id,",
						"          loan_amount),",
						"     asc(loan_id, true),",
						"     RowNum = rowNumber()) ~> window2",
						"loans split(!isNull(loan_id) && !isNull(customer_id),",
						"     disjoint: false) ~> split4@(NotNull, Nulls)",
						"window2 filter(RowNum==1) ~> filterloanDuplicates",
						"filterloanDuplicates select(mapColumn(",
						"          loan_id,",
						"          customer_id,",
						"          loan_amount,",
						"          interest_rate,",
						"          loan_term",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select",
						"transactions split(!isNull(transaction_id) && !isNull(account_id),",
						"     disjoint: false) ~> split5@(NotNull, Nulls)",
						"split5@NotNull aggregate(groupBy(transaction_id),",
						"     each(match(name!='transaction_id'), $$ = first($$))) ~> aggregate3",
						"split1@NotNull sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'silver_layer/accounts',",
						"     truncate: true,",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AcctSink",
						"split1@Nulls sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'nulls_data/account',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AcctNulls",
						"split2@NotNull sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'silver_layer/customers',",
						"     truncate: true,",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CustSink",
						"split2@Null sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'nulls_data/customers',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CustNulls",
						"split3@NotNull sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'silver_layer/loanpayments',",
						"     truncate: true,",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> LoanPymtSink",
						"split3@Nulls sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'nulls_data/loanpayments',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> LoanPymtNulls",
						"select sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'silver_layer/loans',",
						"     truncate: true,",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> LoanSink",
						"split4@Nulls sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'nulls_data/loans',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> LoanNulls",
						"aggregate3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'silver_layer/transactions',",
						"     truncate: true,",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TransactionSink",
						"split5@Nulls sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'nulls_data/transactions',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TransNulls"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		}
	]
}