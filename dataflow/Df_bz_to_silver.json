{
	"name": "Df_bz_to_silver",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "synapse-vam-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "agents"
				},
				{
					"linkedService": {
						"referenceName": "synapse-vam-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "customers"
				},
				{
					"linkedService": {
						"referenceName": "synapse-vam-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "products"
				},
				{
					"linkedService": {
						"referenceName": "synapse-vam-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "stores"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase",
						"type": "LinkedServiceReference"
					},
					"name": "sinkagents"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase",
						"type": "LinkedServiceReference"
					},
					"name": "sinkcustomer"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase",
						"type": "LinkedServiceReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "notnullagent"
				},
				{
					"name": "nonullcust"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "NoNullProd"
				},
				{
					"name": "aggregate4"
				},
				{
					"name": "noNullsStores"
				},
				{
					"name": "aggregate5"
				}
			],
			"scriptLines": [
				"source(output(",
				"          AgentID as integer,",
				"          Name as string,",
				"          Department as string,",
				"          Shift as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     folderPath: 'project03/bronze',",
				"     fileName: 'Agents.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> agents",
				"source(output(",
				"          CustomerID as integer,",
				"          Name as string,",
				"          Email as string,",
				"          Address as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     folderPath: 'project03/bronze',",
				"     fileName: 'Customers.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> customers",
				"source(output(",
				"          ProductID as integer,",
				"          Name as string,",
				"          Category as string,",
				"          Price as double",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     folderPath: 'project03/bronze',",
				"     fileName: 'Products.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> products",
				"source(output(",
				"          StoreID as integer,",
				"          Location as string,",
				"          Manager as string,",
				"          OpenHours as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     folderPath: 'project03/bronze',",
				"     fileName: 'Stores.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> stores",
				"notnullagent@notnull1 aggregate(groupBy(AgentID),",
				"     each(match(name!=\"AgentID\"), $$ = first($$))) ~> aggregate1",
				"agents split(!isNull(AgentID) &&",
				"!isNull(Name) &&",
				"!isNull(Department) &&",
				"!isNull(Shift),",
				"     disjoint: false) ~> notnullagent@(notnull1, null)",
				"customers split(!isNull(CustomerID),",
				"     disjoint: false) ~> nonullcust@(notnull, null)",
				"nonullcust@notnull aggregate(groupBy(CustomerID),",
				"     each(match(name!=\"CustomerID\"), $$ = first($$))) ~> aggregate2",
				"products split(!isNull(ProductID) && !isNull(Name),",
				"     disjoint: false) ~> NoNullProd@(notnull, null)",
				"NoNullProd@notnull aggregate(groupBy(ProductID),",
				"     each(match(name!=\"ProductID\"), $$ = first($$))) ~> aggregate4",
				"stores split(!isNull(StoreID),",
				"     disjoint: false) ~> noNullsStores@(Notnull, null)",
				"noNullsStores@Notnull aggregate(groupBy(StoreID),",
				"     each(match(name!=\"StoreID\"), $$ = first($$))) ~> aggregate5",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'Agents',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          AgentID,",
				"          Name,",
				"          Department,",
				"          Shift",
				"     )) ~> sinkagents",
				"aggregate2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'Customers',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CustomerID,",
				"          Name,",
				"          Email,",
				"          Address",
				"     )) ~> sinkcustomer",
				"aggregate4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'Products',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ProductID,",
				"          Name,",
				"          Category,",
				"          Price",
				"     )) ~> sink2",
				"aggregate5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'Stores',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          StoreID,",
				"          Location,",
				"          Manager,",
				"          OpenHours",
				"     )) ~> sink3"
			]
		}
	}
}