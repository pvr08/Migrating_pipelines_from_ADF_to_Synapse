{
	"name": "df_scdty2_cust",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "customers"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase",
						"type": "LinkedServiceReference"
					},
					"name": "Customertable"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase",
						"type": "LinkedServiceReference"
					},
					"name": "updateSink"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase",
						"type": "LinkedServiceReference"
					},
					"name": "InsertSink"
				}
			],
			"transformations": [
				{
					"name": "select"
				},
				{
					"name": "AddHashkey"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow"
				},
				{
					"name": "union1"
				},
				{
					"name": "AuditCol"
				}
			],
			"scriptLines": [
				"source(output(",
				"          customer_id as integer,",
				"          first_name as string,",
				"          last_name as string,",
				"          address as string,",
				"          city as string,",
				"          state as string,",
				"          zip as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     wildcardPaths:['silver_layer/customers/*.csv']) ~> customers",
				"source(output(",
				"          CUSTOMERID as integer,",
				"          HASHKEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'select CUSTOMERID, HASHKEY from CUSTOMER_SCDTYPE2 where ISACTIVE=1',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> Customertable",
				"customers select(mapColumn(",
				"          each(match(1==1),",
				"               concat('src_',$$) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select",
				"select derive(src_HashKey = crc32(concat(toString(src_customer_id),src_first_name,src_last_name,src_address,src_city,src_state,toString(src_zip)))) ~> AddHashkey",
				"AddHashkey, Customertable lookup(src_customer_id == CUSTOMERID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 split(isNull(CUSTOMERID) && !isNull(src_customer_id),",
				"     src_customer_id==CUSTOMERID && src_HashKey!=toLong(HASHKEY),",
				"     disjoint: false) ~> split1@(INSERT, UPDATE)",
				"split1@UPDATE derive(src_updatedby = 'dataflow-updated',",
				"          src_updateddate = currentTimestamp(),",
				"          src_isActive = 0) ~> derivedColumn1",
				"derivedColumn1 alterRow(updateIf(1==1)) ~> alterRow",
				"split1@INSERT, split1@UPDATE union(byName: true)~> union1",
				"union1 derive(src_createdby = 'dataflow',",
				"          src_createddate = currentTimestamp(),",
				"          src_updatedby = 'dataflow',",
				"          src_updateddate = currentTimestamp(),",
				"          src_isActive = 1) ~> AuditCol",
				"alterRow sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMERID as integer,",
				"          FIRSTNAME as string,",
				"          LASTNAME as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as string,",
				"          CREATEDBY as string,",
				"          CREATEDATE as timestamp,",
				"          UPDATEDBY as string,",
				"          UPDATEDATE as timestamp,",
				"          HASHKEY as string,",
				"          ISACTIVE as boolean",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'CUSTOMER_SCDTYPE2',",
				"     insertable: false,",
				"     updateable: true,",
				"     deletable: false,",
				"     upsertable: false,",
				"     keys:['HASHKEY','CUSTOMERID'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CUSTOMERID = src_customer_id,",
				"          HASHKEY,",
				"          UPDATEDBY = src_updatedby,",
				"          UPDATEDATE = src_updateddate,",
				"          ISACTIVE = src_isActive",
				"     )) ~> updateSink",
				"AuditCol sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMERID as integer,",
				"          FIRSTNAME as string,",
				"          LASTNAME as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as string,",
				"          CREATEDBY as string,",
				"          CREATEDATE as timestamp,",
				"          UPDATEDBY as string,",
				"          UPDATEDATE as timestamp,",
				"          HASHKEY as string,",
				"          ISACTIVE as boolean",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'CUSTOMER_SCDTYPE2',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CUSTOMERID = src_customer_id,",
				"          FIRSTNAME = src_first_name,",
				"          LASTNAME = src_last_name,",
				"          ADDRESS = src_address,",
				"          CITY = src_city,",
				"          STATE = src_state,",
				"          ZIP = src_zip,",
				"          CREATEDBY = src_createdby,",
				"          CREATEDATE = src_createddate,",
				"          UPDATEDBY = src_updatedby,",
				"          UPDATEDATE = src_updateddate,",
				"          HASHKEY = src_HashKey,",
				"          ISACTIVE = src_isActive",
				"     )) ~> InsertSink"
			]
		}
	}
}