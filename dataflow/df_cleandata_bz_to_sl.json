{
	"name": "df_cleandata_bz_to_sl",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "Accounts"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "Customers"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "LoanPayments"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "loans"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "transactions"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "AcctSink"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "AcctNulls"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "CustSink"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "CustNulls"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "LoanPymtSink"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "LoanPymtNulls"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "LoanSink"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "LoanNulls"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "TransactionSink"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "TransNulls"
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "split1"
				},
				{
					"name": "window1"
				},
				{
					"name": "filterDuplicates"
				},
				{
					"name": "select1"
				},
				{
					"name": "split2"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "split3"
				},
				{
					"name": "window2"
				},
				{
					"name": "split4"
				},
				{
					"name": "filterloanDuplicates"
				},
				{
					"name": "select"
				},
				{
					"name": "split5"
				},
				{
					"name": "aggregate3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          account_id as integer,",
				"          customer_id as integer,",
				"          account_type as string,",
				"          balance as double",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     folderPath: 'bronze_layer',",
				"     fileName: 'accounts.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> Accounts",
				"source(output(",
				"          customer_id as integer,",
				"          first_name as string,",
				"          last_name as string,",
				"          address as string,",
				"          city as string,",
				"          state as string,",
				"          zip as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     folderPath: 'bronze_layer',",
				"     fileName: 'customers.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> Customers",
				"source(output(",
				"          payment_id as integer,",
				"          loan_id as integer,",
				"          payment_date as date,",
				"          payment_amount as double",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     folderPath: 'bronze_layer',",
				"     fileName: 'loan_payments.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> LoanPayments",
				"source(output(",
				"          loan_id as integer,",
				"          customer_id as integer,",
				"          loan_amount as double,",
				"          interest_rate as double,",
				"          loan_term as integer",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     folderPath: 'bronze_layer',",
				"     fileName: 'loans.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> loans",
				"source(output(",
				"          transaction_id as integer,",
				"          account_id as integer,",
				"          transaction_date as date,",
				"          transaction_amount as double,",
				"          transaction_type as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     folderPath: 'bronze_layer',",
				"     fileName: 'transactions.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> transactions",
				"Accounts aggregate(groupBy(account_id),",
				"     customer_id = first(customer_id),",
				"          account_type = first(account_type),",
				"          balance = first(balance)) ~> aggregate1",
				"aggregate1 split(!isNull(account_id) && !isNull(customer_id),",
				"     disjoint: false) ~> split1@(NotNull, Nulls)",
				"Customers window(over(customer_id,",
				"          first_name,",
				"          last_name),",
				"     asc(customer_id, true),",
				"     RowNum = rowNumber()) ~> window1",
				"window1 filter(RowNum==1) ~> filterDuplicates",
				"filterDuplicates select(mapColumn(",
				"          customer_id,",
				"          first_name,",
				"          last_name,",
				"          address,",
				"          city,",
				"          state,",
				"          zip",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 split(!isNull(customer_id) &&",
				"!isNull(first_name) || !isNull(last_name),",
				"     disjoint: false) ~> split2@(NotNull, Null)",
				"LoanPayments aggregate(groupBy(payment_id),",
				"     each(match(name!='payment_id'), $$ = first($$))) ~> aggregate2",
				"aggregate2 split(!isNull(payment_id) &&",
				"!isNull(loan_id),",
				"     disjoint: false) ~> split3@(NotNull, Nulls)",
				"split4@NotNull window(over(loan_id,",
				"          customer_id,",
				"          loan_amount),",
				"     asc(loan_id, true),",
				"     RowNum = rowNumber()) ~> window2",
				"loans split(!isNull(loan_id) && !isNull(customer_id),",
				"     disjoint: false) ~> split4@(NotNull, Nulls)",
				"window2 filter(RowNum==1) ~> filterloanDuplicates",
				"filterloanDuplicates select(mapColumn(",
				"          loan_id,",
				"          customer_id,",
				"          loan_amount,",
				"          interest_rate,",
				"          loan_term",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select",
				"transactions split(!isNull(transaction_id) && !isNull(account_id),",
				"     disjoint: false) ~> split5@(NotNull, Nulls)",
				"split5@NotNull aggregate(groupBy(transaction_id),",
				"     each(match(name!='transaction_id'), $$ = first($$))) ~> aggregate3",
				"split1@NotNull sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     folderPath: 'silver_layer/accounts',",
				"     truncate: true,",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AcctSink",
				"split1@Nulls sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     folderPath: 'nulls_data/account',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AcctNulls",
				"split2@NotNull sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     folderPath: 'silver_layer/customers',",
				"     truncate: true,",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CustSink",
				"split2@Null sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     folderPath: 'nulls_data/customers',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CustNulls",
				"split3@NotNull sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     folderPath: 'silver_layer/loanpayments',",
				"     truncate: true,",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LoanPymtSink",
				"split3@Nulls sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     folderPath: 'nulls_data/loanpayments',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LoanPymtNulls",
				"select sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     folderPath: 'silver_layer/loans',",
				"     truncate: true,",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LoanSink",
				"split4@Nulls sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     folderPath: 'nulls_data/loans',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LoanNulls",
				"aggregate3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     folderPath: 'silver_layer/transactions',",
				"     truncate: true,",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TransactionSink",
				"split5@Nulls sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data',",
				"     folderPath: 'nulls_data/transactions',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TransNulls"
			]
		}
	}
}